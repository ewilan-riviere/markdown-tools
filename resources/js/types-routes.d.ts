// This file is auto generated by TypescriptableLaravel.
declare namespace App {
  declare namespace Route {
    'login' | 'login' | 'logout' | 'password.request' | 'password.reset' | 'password.email' | 'password.update' | 'register' | 'register' | 'user-profile-information.update' | 'user-password.update' | 'user/confirm-password' | 'password.confirmation' | 'password.confirm' | 'two-factor.login' | 'two-factor-challenge' | 'two-factor.enable' | 'two-factor.confirm' | 'two-factor.disable' | 'two-factor.qr-code' | 'two-factor.secret-key' | 'two-factor.recovery-codes' | 'user/two-factor-recovery-codes' | 'profile.show' | 'other-browser-sessions.destroy' | 'current-user-photo.destroy' | 'current-user.destroy' | 'sanctum.csrf-cookie' | 'api/user' | '/' | 'dashboard'
    export type Name = 'login' | 'login' | 'logout' | 'password.request' | 'password.reset' | 'password.email' | 'password.update' | 'register' | 'register' | 'user-profile-information.update' | 'user-password.update' | 'user/confirm-password' | 'password.confirmation' | 'password.confirm' | 'two-factor.login' | 'two-factor-challenge' | 'two-factor.enable' | 'two-factor.confirm' | 'two-factor.disable' | 'two-factor.qr-code' | 'two-factor.secret-key' | 'two-factor.recovery-codes' | 'user/two-factor-recovery-codes' | 'profile.show' | 'other-browser-sessions.destroy' | 'current-user-photo.destroy' | 'current-user.destroy' | 'sanctum.csrf-cookie' | 'api/user' | '/' | 'dashboard'
    export type Path = '/login' | '/login' | '/logout' | '/forgot-password' | '/reset-password/{token}' | '/forgot-password' | '/reset-password' | '/register' | '/register' | '/user/profile-information' | '/user/password' | '/user/confirm-password' | '/user/confirmed-password-status' | '/user/confirm-password' | '/two-factor-challenge' | '/two-factor-challenge' | '/user/two-factor-authentication' | '/user/confirmed-two-factor-authentication' | '/user/two-factor-authentication' | '/user/two-factor-qr-code' | '/user/two-factor-secret-key' | '/user/two-factor-recovery-codes' | '/user/two-factor-recovery-codes' | '/user/profile' | '/user/other-browser-sessions' | '/user/profile-photo' | '/user' | '/sanctum/csrf-cookie' | '/api/user' | '/' | '/dashboard';
    export type Params = {
      'login': never,
      'login': never,
      'logout': never,
      'password.request': never,
      'password.reset': {
        'token'?: App.Route.Param
      },
      'password.email': never,
      'password.update': never,
      'register': never,
      'register': never,
      'user-profile-information.update': never,
      'user-password.update': never,
      'user/confirm-password': never,
      'password.confirmation': never,
      'password.confirm': never,
      'two-factor.login': never,
      'two-factor-challenge': never,
      'two-factor.enable': never,
      'two-factor.confirm': never,
      'two-factor.disable': never,
      'two-factor.qr-code': never,
      'two-factor.secret-key': never,
      'two-factor.recovery-codes': never,
      'user/two-factor-recovery-codes': never,
      'profile.show': never,
      'other-browser-sessions.destroy': never,
      'current-user-photo.destroy': never,
      'current-user.destroy': never,
      'sanctum.csrf-cookie': never,
      'api/user': never,
      '/': never,
      'dashboard': never
    };

    export type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
    export interface Entity { name: App.Route.Name; path: App.Route.Path; params?: App.Route.Params[Route.Name],  method: App.Route.Method; }

    declare namespace Typed {
      type LoginGET = {
        name: 'login',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LoginPOST = {
        name: 'login',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type LogoutPOST = {
        name: 'logout',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type ForgotPasswordGET = {
        name: 'password.request',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type ResetPasswordTokenGET = {
        name: 'password.reset',
        params: {
          token: App.Route.Param,
        },
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type ForgotPasswordPOST = {
        name: 'password.email',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type ResetPasswordPOST = {
        name: 'password.update',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type RegisterGET = {
        name: 'register',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type RegisterPOST = {
        name: 'register',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserProfileInformationPUT = {
        name: 'user-profile-information.update',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserPasswordPUT = {
        name: 'user-password.update',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserConfirmPasswordGET = {
        name: 'user/confirm-password',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserConfirmedPasswordStatusGET = {
        name: 'password.confirmation',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserConfirmPasswordPOST = {
        name: 'password.confirm',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type TwoFactorChallengeGET = {
        name: 'two-factor.login',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type TwoFactorChallengePOST = {
        name: 'two-factor-challenge',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserTwoFactorAuthenticationPOST = {
        name: 'two-factor.enable',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserConfirmedTwoFactorAuthenticationPOST = {
        name: 'two-factor.confirm',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserTwoFactorAuthenticationDELETE = {
        name: 'two-factor.disable',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserTwoFactorQrCodeGET = {
        name: 'two-factor.qr-code',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserTwoFactorSecretKeyGET = {
        name: 'two-factor.secret-key',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserTwoFactorRecoveryCodesGET = {
        name: 'two-factor.recovery-codes',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserTwoFactorRecoveryCodesPOST = {
        name: 'user/two-factor-recovery-codes',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserProfileGET = {
        name: 'profile.show',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserOtherBrowserSessionsDELETE = {
        name: 'other-browser-sessions.destroy',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserProfilePhotoDELETE = {
        name: 'current-user-photo.destroy',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type UserDELETE = {
        name: 'current-user.destroy',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type SanctumCsrfCookieGET = {
        name: 'sanctum.csrf-cookie',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type ApiUserGET = {
        name: 'api/user',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type GET = {
        name: '/',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      };
      type DashboardGET = {
        name: 'dashboard',
        params?: undefined,
        query?: Record<string, App.Route.Param>,
        hash?: string,
      }
    }
    export type Param = string | number | boolean | undefined
    export type Type = App.Route.Typed.LoginGET | App.Route.Typed.LoginPOST | App.Route.Typed.LogoutPOST | App.Route.Typed.ForgotPasswordGET | App.Route.Typed.ResetPasswordTokenGET | App.Route.Typed.ForgotPasswordPOST | App.Route.Typed.ResetPasswordPOST | App.Route.Typed.RegisterGET | App.Route.Typed.RegisterPOST | App.Route.Typed.UserProfileInformationPUT | App.Route.Typed.UserPasswordPUT | App.Route.Typed.UserConfirmPasswordGET | App.Route.Typed.UserConfirmedPasswordStatusGET | App.Route.Typed.UserConfirmPasswordPOST | App.Route.Typed.TwoFactorChallengeGET | App.Route.Typed.TwoFactorChallengePOST | App.Route.Typed.UserTwoFactorAuthenticationPOST | App.Route.Typed.UserConfirmedTwoFactorAuthenticationPOST | App.Route.Typed.UserTwoFactorAuthenticationDELETE | App.Route.Typed.UserTwoFactorQrCodeGET | App.Route.Typed.UserTwoFactorSecretKeyGET | App.Route.Typed.UserTwoFactorRecoveryCodesGET | App.Route.Typed.UserTwoFactorRecoveryCodesPOST | App.Route.Typed.UserProfileGET | App.Route.Typed.UserOtherBrowserSessionsDELETE | App.Route.Typed.UserProfilePhotoDELETE | App.Route.Typed.UserDELETE | App.Route.Typed.SanctumCsrfCookieGET | App.Route.Typed.ApiUserGET | App.Route.Typed.GET | App.Route.Typed.DashboardGET
    export type TypeGet = App.Route.Typed.LoginGET | App.Route.Typed.ForgotPasswordGET | App.Route.Typed.ResetPasswordTokenGET | App.Route.Typed.RegisterGET | App.Route.Typed.UserConfirmPasswordGET | App.Route.Typed.UserConfirmedPasswordStatusGET | App.Route.Typed.TwoFactorChallengeGET | App.Route.Typed.UserTwoFactorQrCodeGET | App.Route.Typed.UserTwoFactorSecretKeyGET | App.Route.Typed.UserTwoFactorRecoveryCodesGET | App.Route.Typed.UserProfileGET | App.Route.Typed.SanctumCsrfCookieGET | App.Route.Typed.ApiUserGET | App.Route.Typed.GET | App.Route.Typed.DashboardGET
    export type TypePost = App.Route.Typed.LoginPOST | App.Route.Typed.LogoutPOST | App.Route.Typed.ForgotPasswordPOST | App.Route.Typed.ResetPasswordPOST | App.Route.Typed.RegisterPOST | App.Route.Typed.UserConfirmPasswordPOST | App.Route.Typed.TwoFactorChallengePOST | App.Route.Typed.UserTwoFactorAuthenticationPOST | App.Route.Typed.UserConfirmedTwoFactorAuthenticationPOST | App.Route.Typed.UserTwoFactorRecoveryCodesPOST
    export type TypePut = App.Route.Typed.UserProfileInformationPUT | App.Route.Typed.UserPasswordPUT
    export type TypePatch = never
    export type TypeDelete = App.Route.Typed.UserTwoFactorAuthenticationDELETE | App.Route.Typed.UserOtherBrowserSessionsDELETE | App.Route.Typed.UserProfilePhotoDELETE | App.Route.Typed.UserDELETE
  }
}